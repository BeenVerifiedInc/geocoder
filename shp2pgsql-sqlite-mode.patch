Index: loader/shp2pgsql.c
===================================================================
--- loader/shp2pgsql.c	(revision 3813)
+++ loader/shp2pgsql.c	(working copy)
@@ -69,6 +69,7 @@
 
 /* globals */
 int	dump_format = 0; /* 0=insert statements, 1 = dump */
+int	sqlite_format = 0; /* 0=PostGIS GEOMETRY, 1=SQLite BLOB */
 int     simple_geometries = 0; /* 0 = MULTILINESTRING/MULTIPOLYGON, 1 = LINESTRING/POLYGON */
 int	quoteidentifiers = 0;
 int	forceint4 = 0;
@@ -250,7 +251,8 @@
 	optr=result;
 	ptr=str;
 	while (*ptr) {
-		if ( *ptr == '\\' ) *optr++='\\';
+                /* SQLite doesn't support backslash escaping in strings */
+		if ( *ptr == '\\' && !sqlite_format ) *optr++='\\';
                 if ( *ptr == '\'') *optr++='\'';
 		*optr++=*ptr++;
 	}
@@ -264,7 +266,6 @@
 }
 
 
-
 /*
  * PIP(): crossing number test for a point in a polygon
  *      input:   P = a point,
@@ -359,7 +360,10 @@
 				//printf("\t");
 			} else {
 				escval = protect_quotes_string(val);
-				printf("E'%s'", escval);
+                                if (sqlite_format)
+                                    printf("'%s'", escval);
+                                else
+                                    printf("E'%s'", escval);
 				//printf(",");
 			}
 			if ( val != escval ) free(escval);
@@ -521,20 +525,26 @@
 	int j;
 	int field_precision, field_width;
 	DBFFieldType type = -1;
+        const char *pk_type;
 
 	/* 
 	 * Create a table for inserting the shapes into with appropriate
 	 * columns and types
 	 */
+        if (sqlite_format)
+            pk_type = "integer";
+        else 
+            pk_type = "serial";
 
 	if ( schema )
 	{
-		printf("CREATE TABLE \"%s\".\"%s\" (gid serial PRIMARY KEY",
-			schema, table);
+		printf("CREATE TABLE \"%s\".\"%s\" (gid %s PRIMARY KEY",
+			schema, table, pk_type);
 	}
 	else
 	{
-		printf("CREATE TABLE \"%s\" (gid serial PRIMARY KEY", table);
+		printf("CREATE TABLE \"%s\" (gid %s PRIMARY KEY",
+                        table, pk_type);
 	}
 
 	for(j=0;j<num_fields;j++)
@@ -601,20 +611,25 @@
 	printf (");\n");
 
 	/* Create the geometry column with an addgeometry call */
-	if ( schema && readshape == 1 )
-	{
-		printf("SELECT AddGeometryColumn('%s','%s','%s','%d',",
-			schema, table, geom, sr_id);
-	}
-	else if (readshape == 1)
-	{
-		printf("SELECT AddGeometryColumn('','%s','%s','%d',",
-			table, geom, sr_id);
-	}
-	if (pgtype)
-	{ //pgtype will only be set if we are loading geometries
-		printf("'%s',%d);\n", pgtype, pgdims);
-	}
+        if (sqlite_format) {
+            /* SQLite doesn't have a GEOMETRY type */
+            printf("ALTER TABLE %s ADD COLUMN %s blob;", table, geom);
+        } else {
+            if ( schema && readshape == 1 )
+            {
+                    printf("SELECT AddGeometryColumn('%s','%s','%s','%d',",
+                            schema, table, geom, sr_id);
+            }
+            else if (readshape == 1)
+            {
+                    printf("SELECT AddGeometryColumn('','%s','%s','%d',",
+                            table, geom, sr_id);
+            }
+            if (pgtype)
+            { //pgtype will only be set if we are loading geometries
+                    printf("'%s',%d);\n", pgtype, pgdims);
+            }
+        }
 }
 
 void
@@ -798,6 +813,7 @@
 #endif
 	fprintf(out, "  -N <policy> Specify NULL geometries handling policy (insert,skip,abort)\n");
 	fprintf(out, "  -n  Only import DBF file.\n");
+	fprintf(out, "  -L  Format output for SQLite, rather than PostgreSQL.\n");
     fprintf(out, "  -? Display this help screen\n");
 	exit (exitcode);
 }
@@ -1323,8 +1339,14 @@
 	}	
 	else
 	{
-		if (!dump_format)
+		if (!dump_format) {
+                    if (sqlite_format)
+                        /* SQLite BLOBs are formatted as a string of hex
+                         * digits with an X before the leading quote. */
+			printf("X'");
+                    else
 			printf("'");
+                }
 
 		printf("%s", geometry);
 
@@ -1349,7 +1371,7 @@
 		usage(ARGV[0], 0, stdout);
 	}
 
-	while ((c = pgis_getopt(ARGC, ARGV, "kcdapDs:Sg:iW:wIN:n")) != EOF){
+	while ((c = pgis_getopt(ARGC, ARGV, "kcdapDLs:Sg:iW:wIN:n")) != EOF){
 		switch (c) {
 			case 'c':
 				if (opt == ' ')
@@ -1378,6 +1400,9 @@
 			case 'D':
 				dump_format =1;
 				break;
+                        case 'L':
+                                sqlite_format=1;
+                                break;
 			case 'S':
 				simple_geometries =1;
 				break;
